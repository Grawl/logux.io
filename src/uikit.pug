include switcher/switcher.pug

doctype html
html( lang="en" )
  head
    meta( charset="utf-8" )
    title Logux.io UI Kit
    meta( name="viewport" content="width=device-width" )
    link( rel="shortcut icon" href="/base/favicon.svg" type="image/svg+xml" )
    link( rel="shortcut icon" href="/base/32.png" sizes="32x32" )
    link( rel="icon" href="/base/196.png" sizes="196x196" )
    link( rel="icon" href="/base/512.png" sizes="512x512" )
    link( rel="mask-icon" href="/base/pinned.svg" color="#ffc40d" )
    link( rel="apple-touch-icon" href="/base/apple.png" )
    meta( name="app#le-mobile-web-app-title" content="Logux" )
    meta( name="description" content="Logux is a client-server communication tool for collaborative web applications with optimistics UI, offline first and live updates" )
    script( defer src="/common.js" )
    script( defer src="/switcher.js" )
    link( rel="stylesheet" href="/common.sss" )
    link( rel="stylesheet" href="/switcher.sss" )
    meta( property="og:image" content="/base/og.png" )
    link( rel="preconnect" href="https://sidecar.gitter.im/" media="(min-width:941px)" )
  body.layout
    nav.layout_aside
      .layout_menu
        ul.menu
          li.menu_hidden
            a.menu_skip( href="#main" ) Skip navigation
          li
            a.menu_home( rel="home" href="/" )
              picture.menu_logotype
                source( srcset="/menu/logotype-dark.svg" media="(prefers-color-scheme: dark)" )
                img( src="/menu/logotype-light.svg" alt="Logux logotype" height="117" width="78" )
            .menu_separator
          li
            a.menu_link.is-current( href="/guide/architecture/core/" ) Guide
          li
            a.menu_link( href="/recipes/authentication/" ) Recipes
          li
            a.menu_link( href="/web-api/" ) Web API
          li
            a.menu_link( href="/node-api/" ) Node API
          li
            a.menu_link( href="/protocols/ws/spec/" ) Protocols
          li.is-separated
            .menu_separator
            a.menu_link( href="https://twitter.com/logux_io" rel="me" ) Twitter
          li
            a.menu_link( href="https://github.com/logux" rel="me" ) GitHub
          li
            a.menu_link.chat( href="https://gitter.im/logux/logux" rel="me" )
              | Join chat
              .menu_extra (10 people)
      .layout_submenu
        ul.submenu
          li.is-flat
            a.submenu_link( href="#" ) Authentication
          li.is-flat
            a.submenu_link( href="#" ) Scaling

          li
            .submenu_text Logux architecture
            ol
              li
                a.submenu_link( href="#" ) Core Concepts
              li
                a.submenu_link.is-current Using Concepts in Practice
              li
                a.submenu_link( href="#" ) Comparing Logux with AJAX and GraphQL
              li
                a.submenu_link( href="#" ) Parts
              li
                a.submenu_link( href="#" ) Choosing Right Architecture
          li
            a.submenu_link( href="#" ) TestTime
            ul
              li
                a.submenu_link( href="#" ) .getLog()
              li
                a.submenu_link( href="#" ) #lastId
              li
                a.submenu_link( href="#" ) #nextLog()
          li
            .submenu_text Core Concepts and Small Secrets
            ol
              li
                a.submenu_link( href="#" ) Nodes
              li
                a.submenu_link( href="#" ) Actions
              li
                a.submenu_link( href="#" ) Meta
              li
                a.submenu_link( href="#" ) Application State
              li
                a.submenu_link( href="#" ) Channels and Subscriptions
              li
                a.submenu_link( href="#" ) Cleaning Log and Action Reasons
              li
                a.submenu_link( href="#" ) Subprotocols
          li
            .submenu_text Core Concepts and Small Secrets
            ol
              li
                a.submenu_link( href="#" ) Nodes
              li
                a.submenu_link( href="#" ) Actions
              li
                a.submenu_link( href="#" ) Meta
              li
                a.submenu_link( href="#" ) Application State
              li
                a.submenu_link( href="#" ) Channels and Subscriptions
              li
                a.submenu_link( href="#" ) Cleaning Log and Action Reasons
              li
                a.submenu_link( href="#" ) Subprotocols

    .layout_float
      button.layout_open.button.is-square( title="Open menu" )
      button.layout_close.button.is-square( title="Close menu" hidden )
      a.button( href="https://gitter.im/logux/logux" rel="me" )
        .layout_chat
        | Join chat

    main.layout_main#main
      article.text
        .edit
          h1#home.title
            a.title_link( href="#home" title="Direct link to section" )
              | Logux.io UI Kit
          a.edit_link( href="https://github.com/logux/logux.io" title="Edit the page on GitHub" )
        p.text_block Logux #[strong actions] are very similar to #[strong #[a(href="#") Redux actions]]. JSON objects describe what was changed in #[a(href="#") the application state]. Logux Core provides #[code.code BaseNode] class, which will synchronize actions between two nodes. #[code.code ClientNode] and #[code.code ServerNode] classes extend this class with small behaviour changes.
        +switcher('Node.js', 'Ruby on Rails')
          +switcher_section
            p.text_block You can use only string, number, boolean, null, array, and object as values.
            ol.list
              li
                p.text_block They must have type property with a string value.
              li
                p.text_block You can use only string, number, boolean, null, array, and object as values.
            ul.list
              li
                p.text_block The #[code.code standard Redux] way to dispatch actions. Action will not be sent to the server or another browser tab. There is no way to set action’s meta in this method.
                pre.code-block server.undo(meta, <span class="code-block_string">'too late'</span>)
              li
                p.text_block #[code.code preadd]: action is going to be added to the log. It is the only way to set #[a.code(href="#") #[code meta.reasons]]. This event will not be called for cross-tab actions added in a different browser tab.
            p.text_block To stop the server press #[kbd.code Command]+#[kbd.code .] on Mac OS X and #[kbd.code Ctrl]+#[kbd.code C] on Linux and Windows.
          +switcher_section
            p.text_block Clients can also create #[code.code logux/undo] to revert action and ask other clients to revert it (if the developer allowed to re-send these actions on the server).
          .next
            a.button( href="#" )
              | Next chapter
              span.next_icon
        h2#subtitle.title
          a.title_link( href="#subtitle" title="Direct link to section" )
            | Subtitle
        p.text_block By default, the server state is opposite to client state. Because server-side cache could be very big, the database is the single source of truth. You can use any database with Logux.
        p.text_block Logux Server removes action after processing and always look to a database for the latest value. As a result, you can’t undo actions on the server.
        +switcher('Node.js', 'Ruby on Rails', 'Any other HTTP server')
          +switcher_section
            p.text_block Using Logux Server
            pre.code-block.
              <span class="code-block_keyword">const</span> { Server } = <span class="code-block_built_in">require</span>(<span class="code-block_string">'@logux/server'</span>)

              <span class="code-block_function"><span class="code-block_keyword">function</span> <span class="code-block_title">usersReducers</span> (<span class="code-block_params">state = { }, action</span>) </span>{
                <span class="code-block_keyword">if</span> (action.type === <span class="code-block_string">'user/name'</span>) {
                  <span class="code-block_keyword">return</span> { ...state, <span class="code-block_attr">name</span>: action.name }
                } <span class="code-block_keyword">else</span> {
                  <span class="code-block_keyword">return</span> state
                }
              }

              server.auth(<span class="code-block_function">(<span class="code-block_params">userId, token</span>) =&gt;</span> {
                <span class="code-block_comment">// Allow only local users until we will have a proper authentication</span>
                <span class="code-block_keyword">return</span> process.env.NODE_ENV === <span class="code-block_string">'development'</span>
              })
            p.text_block However, you can change this behavior and have event sourcing on the server too.
          +switcher_section
            p.text_block Use Logux Rails gem
          +switcher_section
            p.text_block Write your own library
        h2#add.title
          a.source( href="#" title="Source code" )
          a.title_link( href="#add" title="Direct link to section" )
            code
              | #[span.title_extra Class.]add#[span.title_extra (action, meta)]
        h3#parameters.title
          a.title_link( href="#parameters" title="Direct link to section" ) Parameters
        table.table
          tr
            th Name
            th Type
            th Description
          tr
            td: code.code log
            td: code: a(href="#") Log
            td Unique current machine name.
          tr
            td: code.code reason
            td: code string = 'error'
            td Optional code for reason.
          tr
            td: code.code opts.allowDangerousProtocol
            td: code boolean?
            td Do not show warning when using #[code.code ws://] in production
        h3#returns.title
          a.title_link( href="#returns" title="Direct link to section" ) Returns
        p.text_block: code #[a(href="#") Promise]&lt;#[a(href="#") boolean]&gt;
        hr.line

      article.text
        h1#h1.title
          a.title_link( href="#h1" title="Direct link to section" )
            | Title 1
        p.text_block Logux architecture was designed to be peer-to-peer and flexible. You can build different architecture on top of core concepts depends on your needs.
        h2#h2.title
          a.title_link( href="#h2" title="Direct link to section" )
            | Title 2
        p.text_block Logux architecture was designed to be peer-to-peer and flexible. You can build different architecture on top of core concepts depends on your needs.
        h3#h3.title
          a.title_link( href="#h3" title="Direct link to section" )
            | Title 3
        p.text_block Logux architecture was designed to be peer-to-peer and flexible. You can build different architecture on top of core concepts depends on your needs.
        hr.line

      footer.footer
        section.footer_section
          h3.footer_title About
          .footer_link: a(href="/guide/") Guide
          .footer_link: a(href="/recipes/") Recipes
          .footer_link: a(href="/node-api/") Node API
          .footer_link: a(href="/web-api/") Web API
          .footer_link: a(href="/protocols/") Protocols
        section.footer_section
          h3.footer_title Community
          .footer_link: a(href="https://github.com/logux") GitHub
          .footer_link: a(href="https://twitter.com/logux_io") Twitter
          .footer_link: a(href="https://gitter.im/logux/logux") Gitter
          .footer_link: a(href="https://twitter.com/linguopunk") Linguopunk
        section.footer_section.is-author
          .footer_text Under the #[a(href="https://github.com/logux/logux.io/blob/master/LICENSE" rel="license") MIT] license
          .footer_text Sponsored by #[a(href="https://evilmartians.com/") Evil Martians]
          a.footer_lurkers( href="https://evilmartians.com/" aria-hidden="true" tabindex="-1" )
